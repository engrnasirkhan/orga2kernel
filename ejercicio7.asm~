BITS 16


global start
extern GDT_DESC
extern IDT_DESC
extern idtFill

;Aca arranca todo, en el primer byte.
start:
		cli			;no me interrumpan por ahora
		;xchg	bx, bx
		jmp 	0x122c ;;  bienvenida 

;aca ponemos todos los mensajes		
iniciando: db 'Iniciando el kernel mas inutil del mundo'
iniciando_len equ $ - iniciando		


bienvenida:

;; 		IMPRIMIR_MODO_REAL iniciando, iniciando_len, 0x07, 0, 0
;; 		call	disable_A20
;; 		xchg	bx, bx
;; 		call	check_A20
;; 		xchg	bx, bx
;; 		call 	enable_A20
;; 		xchg	bx, bx
;; 		call	check_A20
;; 		xchg 	bx, bx

		;deshabilitamos las interrupciones
		cli
		
		;cargamos la gdt
		lgdt 	[GDT_DESC]
		
		;seteamos el bit PE del registro cr0
		mov 	eax, cr0
		or  	eax, 01h
		mov 	cr0, eax
		
		;segundo segmento en la GDT, el primero es nulo
		jmp 	0x08:modo_protegido

BITS 32
modo_protegido:

		mov 	ax, 0x10
		mov 	ds, ax		;acomodo el segmento de datos antes de hacer lio
		mov 	es, ax		;acomodo el segmento de datos antes de hacer lio
		mov 	fs, ax		;acomodo el segmento de datos antes de hacer lio
		mov 	gs, ax		;acomodo el segmento de datos antes de hacer lio
		mov	ss, ax		;acomodo el segmento de pila antes de usarla
		
		call	idtFill
		
		lidt	[IDT_DESC]
	
		mov 	ax, 0x20
;; 		mov 	ax, 0x0	;Segmento de datos con base 0xB8000. 0x18: limite en 0xF
		mov 	es, ax

	
		mov 	ecx, (25 * 80) << 1
		mov 	ax, 0x1000
		xor 	edi, edi

		xchg bx,bx
	
;; 		mov [es:edi], edi

		.cicloazul:
			;xchg bx, bx
 			stosw
			loop 	.cicloazul
		
		mov 	ecx, mensaje_len
		mov 	edi, ((10 * 80) + 13) << 1
		
		mov 	ah, 0x1A
		mov 	esi, mensaje
		
		.ciclo:
			lodsb
			stosw
			loop .ciclo
			
		
		jmp 	$
		
mensaje:	db 'Mi vieja mula ya no es lo que era! (ahora protegidos :) )'
mensaje_len equ $ - mensaje

;; %include "macrosmodoreal.mac"

;; %include "a20.asm"




