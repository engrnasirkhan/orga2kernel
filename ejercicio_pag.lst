     1                                  BITS 16
     2                                  %define ORIGIN 0x1200
     3                                  global start
     4                                  start:
     5 00000000 FA                      		cli
     6 00000001 E90000                   		jmp bienvenida
     7                                  		
     8                                  bienvenida:
     9 00000004 0F0116[7F00]            	lgdt 	[GDT_DESC]			
    10                                  	;seteamos el bit PE del registro cr0
    11 00000009 0F20C0                  	mov 	eax, cr0
    12 0000000C 660D01000000            	or  	eax, 01h
    13 00000012 0F22C0                  	mov 	cr0, eax		
    14                                  	;segundo segmento en la GDT, el primero es nulo
    15 00000015 EA[1A00]0800             	jmp 	0x08:modo_protegido
    16                                  
    17                                  BITS 32
    18                                  modo_protegido:
    19                                  	
    20 0000001A 66B81000                 	mov 	ax, 0x10
    21 0000001E 8ED8                     	mov 	ds, ax		;acomodo el segmento de datos antes de hacer lio
    22 00000020 8EC0                     	mov 	es, ax		;acomodo el segmento de datos antes de hacer lio
    23 00000022 8EE0                     	mov 	fs, ax		;acomodo el segmento de datos antes de hacer lio
    24 00000024 8EE8                    	mov 	gs, ax		;acomodo el segmento de datos antes de hacer lio
    25 00000026 8ED0                     	mov	ss, ax		;acomodo el segmento de pila antes de usarla
    26                                  
    27                                  	
    28 00000028 0F011D[68030000]        	lidt [IDT_DESC]
    29 0000002F 6828000000              	push dword 0x28
    30 00000034 6820000000              	push dword 0x20
    31 00000039 E8C3030000              	call init_pics
    32 0000003E 81C408000000            	add esp, 8
    33                                  
    34 00000044 FB                      	sti
    35 00000045 FB                      	sti
    36                                  	
    37 00000046 8D05[83030000]          	lea eax, [protegido]
    38 0000004C 50                      	push eax
    39 0000004D E847030000              	call print
    40                                  
    41 00000052 B80A000000              	mov eax, 10
    42 00000057 CD00                    	int 0x0
    43                                  lop:
    44                                  	
    45 00000059 48                      	dec eax
    46 0000005A E9FAFFFFFF              	jmp lop
    47                                  	
    48                                  %include "segments.mac"
    49                              <1> %define S.G  1h<<23+32
    50                              <1> %define S.D_B 1h<<22+32
    51                              <1> %define S.L 1h<<21+32
    52                              <1> %define S.AVL 0h
    53                              <1> %define S.P 1h<<15+32
    54                              <1> %define S.S 1h<<(12+32)
    55                              <1> %define S.TYPE(x) x<<40	
    56                              <1> %define S.DPL(x) x<<13+32
    57                              <1> %define S.LIMIT(x) ( (0xffff & x) | ((x & 0xf_0000)<<32) )
    58                              <1> 	
    59                              <1> %define S.BASE(x) (( x & 0xff00_0000 ) << 32 ) | 	(( x & 0x00ff_0000 ) << 16 ) | 	(( x & 0x0000_ffff ) << 16 )
    60                                  %include "gdt.asm"
    61                              <1> BEGIN_GDT:		
    62                              <1> ;; Primer segmento nulo
    63 0000005F 0000000000000000    <1> dq 0x0
    64                              <1> ;; segmento de codigo 0x8
    65 00000067 FFFF0000009BCF00    <1> dq	S.BASE(0x0)| 	S.LIMIT(0xFFFFF) | 	S.TYPE(1011b) | 	S.G | 	S.D_B | 	S.P | 	S.S
    66                              <1> ;; segmento de datos 0x10
    67 0000006F FFFF00000093CF00    <1> dq 	S.BASE(0x0) | 	S.LIMIT(0xFFFFF) | 	S.TYPE(0011b) | 	S.G | 	S.D_B | 	S.P | 	S.S
    68                              <1> ;; segmento de video 0x18
    69 00000077 9F0F00800B934000    <1> dq 	S.BASE(0xb8000) | 	S.LIMIT( (25*80*2) - 1 ) | 	S.TYPE(0011b) | 	S.D_B | 	S.P | 	S.S
    70                              <1> 	
    71                              <1> END_GDT:
    72                              <1> GDT_SIZE:	
    73 0000007F 1F00                <1> GDT_DESC:	dw END_GDT-BEGIN_GDT-1
    74 00000081 [5F000000]          <1> 		dd BEGIN_GDT
    75                              <1> 
    76                              <1> 		
    77                              <1> 
    78                              <1> 
    79                              <1> 
    80                              <1> ;; begin_page_directory:
    81                              <1> ;; ;; |	   base | reserved  |pat|avl| g |ps | d | a |pcd|pwt|u/s|r/w| P |
    82                              <1> ;; ;;  00_0000_0000_0_0000_0000___0_000___1___0___0___0___0___1___0___1___1b
    83                              <1> ;; dd 0x10b + begin_page_table
    84                              <1> ;; end_page_directory:
    85                              <1> ;; times (4096 - (end_page_directory-begin_page_directory)) db 0x0
    86                              <1> 
    87                              <1> ;; begin_page_table:
    88                              <1> ;; ;; mi kernel tiene 0x3040 bytes y arranca en 0x1200
    89                              <1> ;; ;; asi si hago identity mapping necesito paginar en la 
    90                              <1> ;; ;; tabla de paginas hasta 0x4240
    91                              <1> 
    92                              <1> ;; ;; |	   base        base |pat|avl| g |ps | d | a |pcd|pwt|u/s|r/w| P |
    93                              <1> ;; ;;  00_0000_0000_0_0000_0000___0_000___1___0___0___0___0___1___0___1___1b
    94                              <1> 
    95                              <1> ;; %assign i 0
    96                              <1> ;; %rep 6
    97                              <1> ;;      dd i<<12 | 0x0000010b
    98                              <1> ;;      %assign i i+1
    99                              <1> ;; %endrep
   100                              <1> ;; ;;ahora en 0x6000 tengo la memoria de video
   101                              <1> ;; dd 0xb8000 | 0x0000010b
   102                              <1> ;; end_page_table:
   103                              <1> ;; times (4096 - (end_page_table-begin_page_table)) db 0x0
   104                              <1> 
   105                                  %include "idt.asm"
   106                              <1> 
   107                              <1> %define CG.OFFSET(x) 	(0xffff & x) | ((0xffff_0000 & x)<<32)
   108                              <1> %define CG.SELECTOR(x) ((0xffff & x)<<16)
   109                              <1> %define CG.TYPE(x) ((x & 1111b) << 40) 
   110                              <1> %define CG.PARAM(x) ((1_1111b & x) << 32 )
   111                              <1> %define CG.P 1b<<15+32
   112                              <1> %define CG.DPL(x) (x & 11b)<<13
   113                              <1> 
   114                              <1> %include "isr.asm"
   115                              <2> isr0:
   116 00000085 60                  <2> 	pusha
   117                              <2> 	
   118 00000086 8D05[9A000000]      <2> 	lea eax, [isr0_msg]
   119 0000008C 50                  <2> 	push eax
   120 0000008D E807030000          <2> 	call print
   121 00000092 81C404000000        <2> 	add esp, 4
   122                              <2> 	
   123 00000098 61                  <2> 	popa
   124 00000099 CF                  <2> 	iret
   125 0000009A 495352203000        <2> isr0_msg: db	"ISR 0",0	
   126                              <2> isr1:
   127 000000A0 60                  <2> 	pusha
   128                              <2> 	
   129 000000A1 8D05[B5000000]      <2> 	lea eax, [isr1_msg]
   130 000000A7 50                  <2> 	push eax
   131 000000A8 E8EC020000          <2> 	call print
   132 000000AD 81C404000000        <2> 	add esp, 4
   133                              <2> 	
   134 000000B3 61                  <2> 	popa
   135 000000B4 CF                  <2> 	iret
   136 000000B5 495352203100        <2> isr1_msg: db	"ISR 1",0
   137                              <2> isr2:
   138 000000BB 60                  <2> 	pusha
   139                              <2> 	
   140 000000BC 8D05[D0000000]      <2> 	lea eax, [isr2_msg]
   141 000000C2 50                  <2> 	push eax
   142 000000C3 E8D1020000          <2> 	call print
   143 000000C8 81C404000000        <2> 	add esp, 4
   144                              <2> 	
   145 000000CE 61                  <2> 	popa
   146 000000CF CF                  <2> 	iret
   147 000000D0 495352203200        <2> isr2_msg: db	"ISR 2",0
   148                              <2> isr3:
   149 000000D6 60                  <2> 	pusha
   150                              <2> 	
   151 000000D7 8D05[EB000000]      <2> 	lea eax, [isr3_msg]
   152 000000DD 50                  <2> 	push eax
   153 000000DE E8B6020000          <2> 	call print
   154 000000E3 81C404000000        <2> 	add esp, 4
   155                              <2> 	
   156 000000E9 61                  <2> 	popa
   157 000000EA CF                  <2> 	iret
   158 000000EB 495352203300        <2> isr3_msg: db	"ISR 3",0
   159                              <2> isr4:
   160 000000F1 60                  <2> 	pusha
   161                              <2> 	
   162 000000F2 8D05[06010000]      <2> 	lea eax, [isr4_msg]
   163 000000F8 50                  <2> 	push eax
   164 000000F9 E89B020000          <2> 	call print
   165 000000FE 81C404000000        <2> 	add esp, 4
   166                              <2> 	
   167 00000104 61                  <2> 	popa
   168 00000105 CF                  <2> 	iret
   169 00000106 495352203400        <2> isr4_msg: db	"ISR 4",0
   170                              <2> isr5:
   171 0000010C 60                  <2> 	pusha
   172                              <2> 	
   173 0000010D 8D05[21010000]      <2> 	lea eax, [isr5_msg]
   174 00000113 50                  <2> 	push eax
   175 00000114 E880020000          <2> 	call print
   176 00000119 81C404000000        <2> 	add esp, 4
   177                              <2> 	
   178 0000011F 61                  <2> 	popa
   179 00000120 CF                  <2> 	iret
   180 00000121 495352203500        <2> isr5_msg: db	"ISR 5",0
   181                              <2> isr6:
   182 00000127 60                  <2> 	pusha
   183                              <2> 	
   184 00000128 8D05[3C010000]      <2> 	lea eax, [isr6_msg]
   185 0000012E 50                  <2> 	push eax
   186 0000012F E865020000          <2> 	call print
   187 00000134 81C404000000        <2> 	add esp, 4
   188                              <2> 	
   189 0000013A 61                  <2> 	popa
   190 0000013B CF                  <2> 	iret
   191 0000013C 495352203600        <2> isr6_msg: db	"ISR 6",0
   192                              <2> 
   193                              <2> isr7:
   194 00000142 60                  <2> 	pusha
   195                              <2> 	
   196 00000143 8D05[57010000]      <2> 	lea eax, [isr7_msg]
   197 00000149 50                  <2> 	push eax
   198 0000014A E84A020000          <2> 	call print
   199 0000014F 81C404000000        <2> 	add esp, 4
   200                              <2> 	
   201 00000155 61                  <2> 	popa
   202 00000156 CF                  <2> 	iret
   203 00000157 495352203700        <2> isr7_msg: db	"ISR 7",0
   204                              <2> isr8:
   205 0000015D 60                  <2> 	pusha
   206                              <2> 	
   207 0000015E 8D05[72010000]      <2> 	lea eax, [isr8_msg]
   208 00000164 50                  <2> 	push eax
   209 00000165 E82F020000          <2> 	call print
   210 0000016A 81C404000000        <2> 	add esp, 4
   211                              <2> 	
   212 00000170 61                  <2> 	popa
   213 00000171 CF                  <2> 	iret
   214 00000172 495352203800        <2> isr8_msg: db	"ISR 8",0
   215                              <2> isr9:
   216 00000178 60                  <2> 	pusha
   217                              <2> 	
   218 00000179 8D05[8D010000]      <2> 	lea eax, [isr9_msg]
   219 0000017F 50                  <2> 	push eax
   220 00000180 E814020000          <2> 	call print
   221 00000185 81C404000000        <2> 	add esp, 4
   222                              <2> 	
   223 0000018B 61                  <2> 	popa
   224 0000018C CF                  <2> 	iret
   225                              <2> 
   226 0000018D 495352203900        <2> isr9_msg: db	"ISR 9",0
   227                              <2> isr10:
   228 00000193 60                  <2> 	pusha
   229                              <2> 	
   230 00000194 8D05[A8010000]      <2> 	lea eax, [isr10_msg]
   231 0000019A 50                  <2> 	push eax
   232 0000019B E8F9010000          <2> 	call print
   233 000001A0 81C404000000        <2> 	add esp, 4
   234                              <2> 	
   235 000001A6 61                  <2> 	popa
   236 000001A7 CF                  <2> 	iret
   237                              <2> 
   238 000001A8 49535220313000      <2> isr10_msg: db	"ISR 10",0
   239                              <2> isr11:
   240 000001AF 60                  <2> 	pusha
   241                              <2> 	
   242 000001B0 8D05[C4010000]      <2> 	lea eax, [isr11_msg]
   243 000001B6 50                  <2> 	push eax
   244 000001B7 E8DD010000          <2> 	call print
   245 000001BC 81C404000000        <2> 	add esp, 4
   246                              <2> 	
   247 000001C2 61                  <2> 	popa
   248 000001C3 CF                  <2> 	iret
   249 000001C4 49535220313100      <2> isr11_msg: db	"ISR 11",0
   250                              <2> isr12:
   251 000001CB 60                  <2> 	pusha
   252                              <2> 	
   253 000001CC 8D05[E0010000]      <2> 	lea eax, [isr12_msg]
   254 000001D2 50                  <2> 	push eax
   255 000001D3 E8C1010000          <2> 	call print
   256 000001D8 81C404000000        <2> 	add esp, 4
   257                              <2> 	
   258 000001DE 61                  <2> 	popa
   259 000001DF CF                  <2> 	iret
   260                              <2> 
   261 000001E0 49535220313200      <2> isr12_msg: db	"ISR 12",0
   262                              <2> isr13:
   263 000001E7 60                  <2> 	pusha	
   264 000001E8 8D05[FC010000]      <2> 	lea eax, [isr13_msg]
   265 000001EE 50                  <2> 	push eax
   266 000001EF E8A5010000          <2>  	call print
   267 000001F4 81C404000000        <2> 	add esp, 4
   268 000001FA 61                  <2> 	popa
   269 000001FB CF                  <2> 	iret
   270 000001FC 49535220313300      <2> isr13_msg: db	"ISR 13",0
   271                              <2> isr14:
   272 00000203 60                  <2> 	pusha
   273                              <2> 	
   274 00000204 8D05[18020000]      <2> 	lea eax, [isr14_msg]
   275 0000020A 50                  <2> 	push eax
   276 0000020B E889010000          <2> 	call print
   277 00000210 81C404000000        <2> 	add esp, 4
   278                              <2> 	
   279 00000216 61                  <2> 	popa
   280 00000217 CF                  <2> 	iret
   281                              <2> 
   282 00000218 49535220313400      <2> isr14_msg: db	"ISR 14",0
   283                              <2> isr15:
   284 0000021F 60                  <2> 	pusha
   285                              <2> 	
   286 00000220 8D05[34020000]      <2> 	lea eax, [isr15_msg]
   287 00000226 50                  <2> 	push eax
   288 00000227 E86D010000          <2> 	call print
   289 0000022C 81C404000000        <2> 	add esp, 4
   290                              <2> 	
   291 00000232 61                  <2> 	popa
   292 00000233 CF                  <2> 	iret
   293                              <2> 
   294 00000234 49535220313500      <2> isr15_msg: db	"ISR 15",0
   295                              <2> isr32:
   296 0000023B 60                  <2> 	pusha
   297                              <2> 	
   298 0000023C 8D05[50020000]      <2> 	lea eax, [isr32_msg]
   299 00000242 50                  <2> 	push eax
   300 00000243 E851010000          <2> 	call print
   301 00000248 81C404000000        <2> 	add esp, 4
   302                              <2> 	
   303 0000024E 61                  <2> 	popa
   304 0000024F CF                  <2> 	iret
   305                              <2> 
   306 00000250 49535220333200      <2> isr32_msg: db	"ISR 32",0
   307                              <2> 
   308                              <2> 
   309                              <2> 
   310                              <2> 
   311 00000257 00                  <1> times (0x8-(($-$$) & 111b)) db 0
   312                              <1> 	
   313                              <1> BEGIN_IDT:
   314                              <1> 	;; isr 0
   315 00000258 85120800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr0-$$+ORIGIN ) | CG.SELECTOR(0x8)
   316                              <1> 	;; isr 1
   317 00000260 A0120800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr1-$$+ORIGIN ) | CG.SELECTOR(0x8)
   318                              <1> 	;; isr 2
   319 00000268 BB120800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr2-$$+ORIGIN ) | CG.SELECTOR(0x8)
   320                              <1> 	;; isr 3
   321 00000270 D6120800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr3-$$+ORIGIN ) | CG.SELECTOR(0x8)
   322                              <1> 	;; isr 4
   323 00000278 F1120800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr4-$$+ORIGIN ) | CG.SELECTOR(0x8)
   324                              <1> 	;; isr 5
   325 00000280 0C130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr5-$$+ORIGIN ) | CG.SELECTOR(0x8)
   326                              <1> 	;; isr 6
   327 00000288 27130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr6-$$+ORIGIN ) | CG.SELECTOR(0x8)
   328                              <1> 	;; isr 7
   329 00000290 42130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr7-$$+ORIGIN ) | CG.SELECTOR(0x8)
   330                              <1> 	;; isr 8
   331 00000298 5D130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr8-$$+ORIGIN ) | CG.SELECTOR(0x8)
   332                              <1> 	;; isr 9
   333 000002A0 78130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr9-$$+ORIGIN ) | CG.SELECTOR(0x8)
   334                              <1> 	;; isr 10
   335 000002A8 93130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr10-$$+ORIGIN ) | CG.SELECTOR(0x8)
   336                              <1> 	;; isr 11
   337 000002B0 AF130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr11-$$+ORIGIN ) | CG.SELECTOR(0x8)
   338                              <1> 	;; isr 12
   339 000002B8 CB130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr12-$$+ORIGIN ) | CG.SELECTOR(0x8)
   340                              <1> 	;; isr 13
   341 000002C0 E7130800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr13-$$+ORIGIN ) | CG.SELECTOR(0x8)
   342                              <1> 	;; isr 14
   343 000002C8 03140800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr14-$$+ORIGIN ) | CG.SELECTOR(0x8)
   344                              <1> 	;; isr 15
   345 000002D0 1F140800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr15-$$+ORIGIN ) | CG.SELECTOR(0x8)
   346                              <1> 	;;
   347 000002D8 0000000000000000-   <1> times 15 dq 0x0
   348 000002D8 <rept>              <1>
   349 00000350 3B140800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr32-$$+ORIGIN ) | CG.SELECTOR(0x8)
   350 00000358 3B140800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr32-$$+ORIGIN ) | CG.SELECTOR(0x8)
   351 00000360 3B140800008E0000    <1> dq CG.P | CG.TYPE(1110b) | CG.OFFSET( isr32-$$+ORIGIN ) | CG.SELECTOR(0x8)
   352                              <1> END_IDT:
   353                              <1> IDT_SIZE:
   354 00000368 0F01                <1> IDT_DESC:	dw END_IDT-BEGIN_IDT-1
   355 0000036A [58020000]          <1> 		dd BEGIN_IDT
   356                                  %include "messages.asm"
   357 0000036E 41686F726120657374- <1> paginado: db "Ahora estoy paginado"
   358 00000377 6F7920706167696E61- <1>
   359 00000380 646F                <1>
   360 00000382 00                  <1> 	db 0
   361 00000383 41686F726120657374- <1> protegido: db "Ahora estoy protegido"
   362 0000038C 6F792070726F746567- <1>
   363 00000395 69646F              <1>
   364 00000398 00                  <1> 	db 0
   365                              <1> 
   366                                  %include "print_protegido.asm"
   367                              <1> 
   368                              <1> 
   369                              <1> %define param(x) ebp+(x*4)
   370                              <1> 
   371                              <1> print:
   372 00000399 60                  <1> 	pusha
   373 0000039A 89E5                <1> 	mov ebp, esp
   374 0000039C 81C520000000        <1> 	add ebp, 0x20
   375                              <1> 	;; ebp queda apuntando al eip de retorno	
   376 000003A2 06                  <1> 	push es
   377 000003A3 1E                  <1> 	push ds	
   378                              <1> 
   379                              <1> 	;; corro todas las lineas
   380                              <1> 	;; de la pantalla hacia arriba
   381 000003A4 66B81800            <1> 	mov ax, 0x18
   382 000003A8 8EC0                <1> 	mov es, ax
   383 000003AA 8ED8                <1> 	mov ds, ax
   384                              <1> 
   385 000003AC 31FF                <1> 	xor edi, edi
   386 000003AE BEA0000000          <1> 	mov esi, 80<<1 		;80 columnas de word
   387                              <1> 
   388 000003B3 B980070000          <1> 	mov ecx, 80*24
   389 000003B8 F366A5              <1> 	rep movsw		;subi todas las lineas para arriba
   390                              <1> 	
   391                              <1> 	;; ahora limpio la ultima linea
   392 000003BB 31C0                <1> 	xor eax, eax
   393 000003BD B950000000          <1> 	mov ecx, 80
   394 000003C2 F366AB              <1> 	rep stosw 
   395                              <1> 	
   396                              <1> 	;; apunto es al segmento de datos
   397                              <1> 	;; junto con es:edi apunto al string
   398 000003C5 66B81000            <1> 	mov ax, 0x10
   399 000003C9 8EC0                <1> 	mov es, ax
   400                              <1> 	
   401 000003CB 8B7D04              <1>  	mov edi, [param(1)]		;puntero al string
   402                              <1> 	
   403                              <1> 	;; calculo el largo del string que al final tiene un 0
   404 000003CE FC                  <1> 	cld 			;limpio el flag de direccion
   405 000003CF 31C9                <1> 	xor ecx, ecx
   406 000003D1 F7D1                <1> 	not ecx
   407                              <1> 	
   408 000003D3 30C0                <1> 	xor al, al
   409 000003D5 F2AE                <1> 	repnz scasb
   410                              <1> 
   411 000003D7 89CB                <1> 	mov ebx, ecx
   412 000003D9 31C9                <1> 	xor ecx, ecx
   413 000003DB F7D1                <1> 	not ecx
   414 000003DD 29D9                <1> 	sub ecx, ebx
   415                              <1> 	;; en ecx tengo la cantidad de caracteres
   416                              <1> 	;; ds:esi puntero al string
   417                              <1> 	;; es:edi puntero a la pantalla
   418 000003DF 66B81000            <1> 	mov ax, 0x10
   419 000003E3 8ED8                <1> 	mov ds, ax
   420 000003E5 8B7504              <1>  	mov esi, [param(1)]
   421                              <1> 	
   422 000003E8 66B81800            <1> 	mov ax, 0x18
   423 000003EC 8EC0                <1> 	mov es, ax
   424 000003EE BF000F0000          <1> 	mov edi, 80*24*2 	;me paro en la ultima linea
   425                              <1> 
   426 000003F3 B43F                <1> 	mov ah, 0x3F
   427                              <1> 	
   428                              <1> .ciclo:	
   429 000003F5 AC                  <1> 	lodsb
   430 000003F6 66AB                <1> 	stosw
   431 000003F8 E2FB                <1> 	loop .ciclo
   432                              <1> 	
   433 000003FA 1F                  <1> 	pop ds
   434 000003FB 07                  <1> 	pop es
   435 000003FC 61                  <1> 	popa
   436 000003FD C3                  <1> 	ret
   437                                  %include "remap_pic.asm"
   438                              <1> %define PIC1 0x20
   439                              <1> %define PIC2 0xA0
   440 000003FE 11                  <1> ICW1:	db 0x11
   441 000003FF 01                  <1> ICW4:	db 0x01
   442 00000400 00                  <1> ICW_AUX:	db 	0x0
   443                              <1> ;; 	init_pics()
   444                              <1> ;; 	  init the PICs and remap them
   445                              <1> ;; init_pics(0x20, 0x28)	
   446                              <1> ;; (int pic1, int pic2) 
   447                              <1> init_pics:	
   448 00000401 60                  <1> 	pusha
   449                              <1> 
   450 00000402 89E5                <1> 	mov ebp, esp
   451 00000404 81C520000000        <1> 	add ebp, 8*4 		;ebp queda apuntando a eip
   452                              <1> 	
   453 0000040A 1E                  <1> 	push ds
   454 0000040B 66B81000            <1> 	mov ax, 0x10
   455 0000040F 8ED8                <1> 	mov ds, ax
   456                              <1> 	
   457                              <1> ;; 	send ICW1
   458                              <1> ;; 	outb(PIC1, ICW1)	;
   459                              <1> ;; 	outb(PIC2, ICW1)	;
   460 00000411 8D35[FE030000]      <1> 	lea esi, [ICW1]
   461 00000417 66BA2000            <1> 	mov dx, PIC1
   462 0000041B 6E                  <1> 	outsb			;dx <- [ds:esi]
   463                              <1> 	
   464 0000041C 8D35[FE030000]      <1> 	lea esi, [ICW1]
   465 00000422 66BAA000            <1> 	mov dx, PIC2
   466 00000426 6E                  <1> 	outsb
   467                              <1> 
   468                              <1> 
   469                              <1> ;; 	send ICW2 
   470                              <1> ;; 	outb(PIC1 + 1, pic1)	;	/* remap */
   471                              <1> ;; 	outb(PIC2 + 1, pic2)	;	/*  pics */
   472 00000427 89E8                <1> 	mov eax, ebp
   473 00000429 89EB                <1> 	mov ebx, ebp
   474 0000042B 0504000000          <1> 	add eax, 4		; pic1 param address 
   475 00000430 81C308000000        <1> 	add ebx, 8		; pic2 param address 
   476                              <1> 
   477 00000436 89C6                <1> 	mov esi,eax		; ds:esi -> pic1
   478 00000438 66BA2000            <1> 	mov dx, PIC1
   479 0000043C 6642                <1> 	inc dx
   480 0000043E 6E                  <1> 	outsb
   481                              <1> 
   482 0000043F 89DE                <1> 	mov esi, ebx		; ds:esi -> pic1
   483 00000441 66BAA000            <1> 	mov dx, PIC2
   484 00000445 6642                <1> 	inc dx
   485 00000447 6E                  <1> 	outsb
   486                              <1> 
   487                              <1> ;; 	send ICW3
   488                              <1> ;; 	outb(PIC1 + 1, 4)	;	/* IRQ2 -> connection to slave */
   489                              <1> ;; 	outb(PIC2 + 1, 2)	;
   490 00000448 BF04000000          <1> 	mov edi, 4
   491 0000044D 8D35[00040000]      <1> 	lea esi, [ICW_AUX]
   492 00000453 893E                <1> 	mov [esi], edi
   493 00000455 66BA2000            <1> 	mov dx, PIC1
   494 00000459 6642                <1> 	inc dx
   495 0000045B 6E                  <1> 	outsb
   496                              <1> 
   497 0000045C BF02000000          <1> 	mov edi, 2
   498 00000461 8D35[00040000]      <1> 	lea esi, [ICW_AUX]
   499 00000467 893E                <1> 	mov [esi], edi
   500 00000469 66BAA000            <1> 	mov dx, PIC2
   501 0000046D 6642                <1> 	inc dx
   502 0000046F 6E                  <1> 	outsb
   503                              <1> 
   504                              <1> ;; 	send ICW4 
   505                              <1> ;; 	outb(PIC1 + 1, ICW4)	;
   506                              <1> ;; 	outb(PIC2 + 1, ICW4)	;
   507 00000470 8D35[FF030000]      <1> 	lea esi, [ICW4]
   508 00000476 66BA2000            <1> 	mov dx, PIC1
   509 0000047A 6642                <1> 	inc dx
   510 0000047C 6E                  <1> 	outsb			;dx <- [ds:esi]
   511                              <1> 	
   512 0000047D 8D35[FF030000]      <1> 	lea esi, [ICW4]
   513 00000483 66BAA000            <1> 	mov dx, PIC2
   514 00000487 6642                <1> 	inc dx
   515 00000489 6E                  <1> 	outsb			;dx <- [ds:esi]
   516                              <1> 
   517                              <1> ;; 	disable all IRQs
   518                              <1> ;; 	outb(PIC1 + 1, 0xFF)
   519 0000048A BFFF000000          <1> 	mov edi, 0xff
   520 0000048F 8D35[00040000]      <1> 	lea esi, [ICW_AUX]
   521 00000495 893E                <1> 	mov [esi], edi
   522 00000497 66BA2000            <1> 	mov dx, PIC1
   523 0000049B 6642                <1> 	inc dx
   524 0000049D 6E                  <1> 	outsb
   525                              <1> 	
   526 0000049E 1F                  <1> 	pop ds
   527 0000049F 61                  <1> 	popa
   528 000004A0 C3                  <1> 	ret
   529                              <1> 	
   530                              <1> 	
   531                                  
   532                                  	
   533                                  ;; 	call	idtFill
   534                                  	
   535                                  ;; 	lidt	[idt_desc]
   536                                  		
   537                                  
   538                                  ;; 		imprimir_protegido iniciando_juan, iniciando_juan_len
   539                                  				
   540                                  ;; 		genero un GP
   541                                  ;; 		mov ax, 0
   542                                  ;; 		mov es, ax
   543                                  ;; 		mov [es:0x0], edi
   544                                  
   545                                  ;; 		mov eax, begin_page_directory
   546                                  ;; 		mov cr3, eax
   547                                  				
   548                                  ;; 		mov eax, cr0
   549                                  ;;     		or eax, 0x80000000
   550                                  ;; 		mov cr0, eax
   551                                  ;; modo_prot_pag:		
   552                                  ;; 		imprimir_paginado estoy_paginado, estoy_paginado_len
   553                                  	
   554                                  ;; 		mov [es:edi], edi
   555                                  
   556                                  ;; 		.cicloazul:
   557                                  ;; 			;xchg bx, bx
   558                                  ;;  			stosw
   559                                  ;; 			loop 	.cicloazul
   560                                  ;; 			mov 	ecx, mensaje_len
   561                                  ;; 		mov 	edi, ((10 * 80) + 13) << 1
   562                                  		
   563                                  ;; 		mov 	ah, 0x1A
   564                                  ;; 		mov 	esi, mensaje
   565                                  		
   566                                  ;; 		.ciclo:
   567                                  ;; 			lodsb
   568                                  ;; 			stosw
   569                                  ;; 			loop .ciclo
   570                                  			
   571                                  		
   572                                  ;; 		jmp 	$
   573                                  		
   574                                  ;; mensaje:	db 'Mi vieja mula ya no es lo que era! (ahora protegidos :) )'
   575                                  ;; mensaje_len equ $ - mensaje
   576                                  
   577                                  ;; gp_handler:
   578                                  ;;     ; nos salteamos el error code
   579                                  ;;     imprimir_protegido gp_exception, gp_exception_len
   580                                  ;;     add esp, 4
   581                                  ;;     iret
   582                                  
   583                                  ;; pf_handler:
   584                                  ;;     imprimir_protegido pf_exception, pf_exception_len
   585                                  ;;     add esp, 4
   586                                  ;;     iret
   587                                  
   588                                  
   589                                  ;; %include "a20.asm"
   590                                  
   591                                  
   592                                  
   593                                  
